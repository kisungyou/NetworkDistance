library(NetworkDistance)
library(NetworkDistance)
install.packages(c("pracma","network","doParallel"))
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
.rs.setClangDiagnostics(2)
usethis::edit_r_makevars()
library(NetworkDistance)
library(NetworkDistance)
usethis::use_mit_license()
usethis::edit_r_profile()
library(NetworkDistance)
usethis::use_mit_license()
usethis::use_news_md()
2
library(NetworkDistance)
library(NetworkDistance)
usethis::edit_r_makevars()
library(NetworkDistance)
usethis::edit_r_makevars()
library(NetworkDistance)
usethis::edit_r_makevars()
library(NetworkDistance)
.rs.setClangDiagnostics(2)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
.rs.setClangDiagnostics(2)
library(NetworkDistance)
.rs.setClangDiagnostics(0)
library(NetworkDistance)
.rs.setClangDiagnostics(2)
library(NetworkDistance)
library(NetworkDistance)
.rs.setClangDiagnostics(0)
library(NetworkDistance)
library(NetworkDistance)
library(network)
help("as.matrix.network.adjacency")
library(igraph)
help("as_adjacency_matrix")
g <- sample_gnp(10, 2/10)
gg = as_adjacency_matrix(g)
gg
## load example data
data(graph20)
## use 3 types of centrality measures
out1 <- nd.centrality(graph20, out.dist=FALSE,mode="Degree")
out2 <- nd.centrality(graph20, out.dist=FALSE,mode="Close")
out3 <- nd.centrality(graph20, out.dist=FALSE,mode="Between")
## visualize
par(mfrow=c(1,3), pty="s")
image(out1$D[,20:1], main="Degree", col=gray(0:32/32), axes=FALSE)
image(out2$D[,20:1], main="Close", col=gray(0:32/32), axes=FALSE)
image(out3$D[,20:1], main="Between", col=gray(0:32/32), axes=FALSE)
library(NetworkDistance)
## load example data
data(graph20)
## use 3 types of centrality measures
out1 <- nd.centrality(graph20, out.dist=FALSE,mode="Degree")
out2 <- nd.centrality(graph20, out.dist=FALSE,mode="Close")
out3 <- nd.centrality(graph20, out.dist=FALSE,mode="Between")
## visualize
par(mfrow=c(1,3), pty="s")
image(out1$D[,20:1], main="Degree", col=gray(0:32/32), axes=FALSE)
image(out2$D[,20:1], main="Close", col=gray(0:32/32), axes=FALSE)
image(out3$D[,20:1], main="Between", col=gray(0:32/32), axes=FALSE)
help(g"graph20")
help(graph20)
install.packages("graphon")
library(NetworkDistance)
## load example data
data(graph20)
# compute two diffusion-based distances and visualize
out1 = nd.gdd(graph20, out.dist=FALSE)
out2 = nd.nfd(graph20, out.dist=FALSE)
# visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(out1$D[,20:1],col=gray((0:32)/32), main="nd.gdd",axes=FALSE)
image(out2$D[,20:1],col=gray((0:32)/32), main="nd.nfd",axes=FALSE)
par(opar)
## load example data
data(graph20)
## compute distance matrix
output = nd.edd(graph20, out.dist=FALSE)
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
graphics.off()
## load example data and extract only a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output <- nd.dsd(gr.small, out.dist=FALSE)
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load example data and extract only a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output <- nd.dsd(gr.small, out.dist=FALSE)
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
rm(list=ls())
help(rbinom)
#' require(stats)
#' graph20 = list()
#' for (i in 1:10){ # type-1 adjacency matrices
#'   rbin   = rbinom(784,1,0.9)
#'   mat    = matrix(rbin, nrow=28)
#'   matout = mat*t(mat)
#'   diag(matout) = 0
#'   graph20[[i]]=matout
#' }
#' for (i in 11:20){ # type-2 adjacency matrices
#'   rbin   = rbinom(784,1,0.5)
#'   mat    = matrix(rbin, nrow=28)
#'   matout = mat*t(mat)
#'   diag(matout) = 0
#'   graph20[[i]]=matout
#' }
#'   graph20[[i]]=matout
#' }
#' for (i in 11:20){ # type-2 adjacency matrices
#'   rbin   = rbinom(784,1,0.5)
#'   mat    = matrix(rbin, nrow=28)
#'   matout = mat*t(mat)
#'   diag(matout) = 0
#'   graph20[[i]]=matout
#' }
#' }
"graph20"
#' graph20 = list()
#' for (i in 1:10){ # type-1 adjacency matrices
#'   rbin   = rbinom(784,1,0.9)
#'   mat    = matrix(rbin, nrow=28)
#'   matout = mat*t(mat)
#'   diag(matout) = 0
#'   graph20[[i]]=matout
#' }
#' for (i in 11:20){ # type-2 adjacency matrices
#'   rbin   = rbinom(784,1,0.5)
#'   mat    = matrix(rbin, nrow=28)
#'   matout = mat*t(mat)
#'   diag(matout) = 0
#'   graph20[[i]]=matout
#' }
graph20 = list()
for (i in 1:10){ # type-1 adjacency matrices
rbin   = rbinom(784,1,0.9)
mat    = matrix(rbin, nrow=28)
matout = mat*t(mat)
diag(matout) = 0
graph20[[i]]=matout
}
for (i in 11:20){ # type-2 adjacency matrices
rbin   = rbinom(784,1,0.5)
mat    = matrix(rbin, nrow=28)
matout = mat*t(mat)
diag(matout) = 0
graph20[[i]]=matout
}
usethis::use_data("graph20")
usethis::use_data(graph20)
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output <- nd.dsd(gr.small, out.dist=FALSE)
## visualize
## load example data and extract only a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output <- nd.dsd(gr.small, out.dist=FALSE)
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
help(RSpectra)
A = graph20[c(1:5,11:15)]
A
X = A[[1]]
RSpectra::eigs(X,18)
A
length(A)
output <- nd.dsd(gr.small, out.dist=FALSE, type="Lap")
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
rm(list=ls())
library(NetworkDistance)
library(NetworkDistance)
## load example data and extract only a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output <- nd.dsd(gr.small, out.dist=FALSE)
## visualize
opar <- par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load data and extract a subset
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output = nd.gdd(gr.small, out.dist=FALSE)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", col=gray((0:32)/32), axes=FALSE)
par(opar)
## load example data and extract only a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output = nd.hamming(gr.small, out.dist=FALSE)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load example data and extract a few
data(graph20)
gr.small = graph20[c(1:5,11:15)]
## compute distance matrix
output = nd.wsd(gr.small, out.dist=FALSE, K=10)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,10:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load example data
data(graph20)
## compute distance matrix and visualize
output = nd.him(graph20, out.dist=FALSE)
image(output$D[,20:1], main="two group case", axes=FALSE, col=gray(0:32/32))
## load example data
data(graph20)
## compute distance matrix
output = nd.him(graph20, out.dist=FALSE)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load example data
data(graph20)
## compute distance matrix
output = nd.csd(graph20, out.dist=FALSE, bandwidth=1.0)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
## load example data
data(graph20)
## compute distance matrix
output = nd.csd(graph20, out.dist=FALSE, bandwidth=1.0)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="two group case", axes=FALSE, col=gray(0:32/32))
par(opar)
output = nd.extremal(graph20, out.dist=TRUE, k=2)
graphics.off()
image(output)
plot(output)
## load data
data(graph20)
## compute distance matrix
output = nd.extremal(graph20, out.dist=FALSE, k=2)
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="two group case", col=gray(0:32/32), axes=FALSE)
par(opar)
## load example data
data(graph20)
## use 3 types of centrality measures
out1 <- nd.centrality(graph20, out.dist=FALSE,mode="Degree")
out2 <- nd.centrality(graph20, out.dist=FALSE,mode="Close")
out3 <- nd.centrality(graph20, out.dist=FALSE,mode="Between")
## visualize
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(out1$D[,20:1], main="Degree", col=gray(0:32/32), axes=FALSE)
image(out2$D[,20:1], main="Close", col=gray(0:32/32), axes=FALSE)
image(out3$D[,20:1], main="Between", col=gray(0:32/32), axes=FALSE)
par(opar)
## load example data
data(graph20)
## use 3 types of centrality measures
out1 <- nd.centrality(graph20, out.dist=FALSE,mode="Degree")
out2 <- nd.centrality(graph20, out.dist=FALSE,mode="Close")
out3 <- nd.centrality(graph20, out.dist=FALSE,mode="Between")
## visualize
opar = par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(out1$D[,20:1], main="Degree", col=gray(0:32/32), axes=FALSE)
image(out2$D[,20:1], main="Close", col=gray(0:32/32), axes=FALSE)
image(out3$D[,20:1], main="Between", col=gray(0:32/32), axes=FALSE)
par(opar)
allmethods = tolower(c("completion","LG","nbdsmooth","SBA","USVT"))
allmethods
library(NetworkDistance)
## load example data
data(graph20)
## compute USVT-based distance
output <- nd.graphon(graph20, out.dist=FALSE, method="usvt")
## load example data
data(graph20)
## compute USVT-based distance
output <- nd.graphon(graph20, out.dist=FALSE, method="usvt")
## visualize
opar = par(no.readonly=TRUE)
par(pty="s")
image(output$D[,20:1], main="USVT", col=gray(0:32/32), axes=FALSE)
par(opar)
library(NetworkDistance)
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")$D
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")$D
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")$D
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")$D
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")$D
## visualize
opar = par(no.readonly=TRUE)
par(mfrow=c(2,3), pty="s")
image(out1[,20:1], col=gray(0:32/32), axes=FALSE, main="completion")
image(out2[,20:1], col=gray(0:32/32), axes=FALSE, main="LG")
image(out3[,20:1], col=gray(0:32/32), axes=FALSE, main="nbdsmooth")
image(out4[,20:1], col=gray(0:32/32), axes=FALSE, main="SBA")
image(out5[,20:1], col=gray(0:32/32), axes=FALSE, main="USVT")
par(opar)
rm(list=ls())
graphics.off()
library(NetworkDistance)
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
help(est.completion)
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
help(est.LG)
library(NetworkDistance)
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
est.SBA(graph20[[1]])
graphon::est.SBA(graph20[[1]])
image(out1$D[,20:1], col=gray(0:32/32), axes=FALSE, main="completion")
image(out2$D[,20:1], col=gray(0:32/32), axes=FALSE, main="LG")
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
rm(list=ls())
graphics.off()
library(NetworkDistance)
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
library(NetworkDistance)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out1
length(out1)
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
length(out4)
out4
est.SBA
library(graphon)
est.SBA(graph20[[20]])
rm(list=ls())
library(NetworkDistance)
help(est.LG)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=10)
## create a probability matrix for 20 nodes
graphW = gmodel.block(W,n=20)
P = graphW$P
## draw 23 observations from a given probability matrix
A = gmodel.P(P,rep=23,symmetric.out=TRUE)
## run LG algorithm with a rough guess for K=2,3,4
res2 = est.LG(A,K=2)
res3 = est.LG(A,K=3)
res4 = est.LG(A,K=4)
## compare true probability matrix and estimated ones
opar <- par(mfrow=c(2,2), pty="s")
image(P, main="original P matrix")
image(res2$P, main="LG with K=2")
image(res3$P, main="LG with K=3")
image(res4$P, main="LG with K=4")
par(opar)
hello <- function(x, ...){
return(...)
}
hello(1)
hello <- function(x, ...){
return(as.list(...))
}
hello(1)
hello(x=1)
library(NetworkDistance)
library(NetworkDistance)
#
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
help(est.SBA)
rm(list=ls())
library(NetworkDistance)
#
#
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
length(out4)
out4
library(NetworkDistance)
#
#
## load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
out1
length(out1)
length(out2)
length(out3)
length(out4)
length(out5)
rm(list=ls())
help(est.LG)
library(NetworkDistance)
#
#
# load example data
data(graph20)
## compute USVT-based distance
out1 <- nd.graphon(graph20, out.dist=FALSE, method="completion")
out2 <- nd.graphon(graph20, out.dist=FALSE, method="LG")
out3 <- nd.graphon(graph20, out.dist=FALSE, method="nbdsmooth")
out4 <- nd.graphon(graph20, out.dist=FALSE, method="SBA")
out5 <- nd.graphon(graph20, out.dist=FALSE, method="USVT")
out4
out5
out4
out4
out4 = list()
for (i in 1:20){out4[[i]] = est.SBA(graph20[[i]])$P}
for (i in 1:20){out4[[i]] = graphon::est.SBA(graph20[[i]])$P}
out54
out4
lapply(out4, nrow)
rm(list=ls())
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
