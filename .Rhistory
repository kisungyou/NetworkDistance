output
as.matrix(output$D)
## generate two types of adjacency matrices of size (3-by-3)
rbin1 = rbinom(9,1,0.8); mat1 = matrix(rbin1,nrow=3)
rbin2 = rbinom(9,1,0.2); mat2 = matrix(rbin2,nrow=3)
mattype1 = ceiling((mat1+t(mat1))/2); diag(mattype1)=0;
mattype2 = ceiling((mat2+t(mat2))/2); diag(mattype2)=0;
A = list()
for (i in 1:3){A[[i]]=mattype1} # first 3 are type-1
for (i in 4:6){A[[i]]=mattype2} # next  3 are type-2
## Compute Distance Matrix and Visualize
output = testdec(A)
output
mattype1
mattype2
?rbinom
rbin1 = rbinom(100,1,0.8); mat1 = matrix(rbin1,nrow=10)
rbin2 = rbinom(100,1,0.2); mat2 = matrix(rbin2,nrow=10)
rbin1
rbin2
mat2
rbin1 = rbinom(100,1,0.8); mat1 = matrix(rbin1,nrow=10)
rbin2 = rbinom(100,1,0.2); mat2 = matrix(rbin2,nrow=10)
mattype1 = ceiling((mat1+t(mat1))/2); diag(mattype1)=0;
mattype2 = ceiling((mat2+t(mat2))/2); diag(mattype2)=0;
A = list()
for (i in 1:3){A[[i]]=mattype1} # first 3 are type-1
for (i in 4:6){A[[i]]=mattype2} # next  3 are type-2
## Compute Distance Matrix and Visualize
output = testdec(A)
output
rm(list=ls())
library(NetworkDistance)
rm(list=ls())
## generate two types of adjacency matrices of size (10-by-10)
rbin1 = rbinom(100,1,0.8); mat1 = matrix(rbin1,nrow=10)
rbin2 = rbinom(100,1,0.2); mat2 = matrix(rbin2,nrow=10)
mattype1 = ceiling((mat1+t(mat1))/2); diag(mattype1)=0;
mattype2 = ceiling((mat2+t(mat2))/2); diag(mattype2)=0;
A = list()
for (i in 1:3){A[[i]]=mattype1} # first 3 are type-1
for (i in 4:6){A[[i]]=mattype2} # next  3 are type-2
## Compute Distance Matrix and Visualize
output = testdec(A)
output
A = list()
for (i in 1:5){A[[i]]=mattype1} # first 3 are type-1
for (i in 6:10){A[[i]]=mattype2} # next  3 are type-2
## Compute Distance Matrix and Visualize
output = testdec(A)
output
library(NetworkDistance)
L = mattype1
require(Matrix)
expm(-L)
expm(-100*L)
output = testdec(A)
output
set.seed(23)
Total<-20
N1<-Total/2
P1<-0.75
P2<-0.6
P12=0.04
Iteration<-2
CAP<-4
bb<-list()         ## edges to remove
bb[[1]]<-c(1,1)
bb[[2]]<-c(4,19)
bb[[3]]<-c(12,17)
bb[[4]]<-c(13,18)
bb[[5]]<-c(1,3)
bb[[6]]<-c(15,8)
bb[[7]]<-c(2,6)
A<-matrix(0,nrow=Total,ncol=Total)                       ######### define adjacent matrix
for(i in (1:(N1-1)))
{for(j in ((i+1):N1))
{A[i,j]<-rbinom(1,1,P1)
A[j,i]<-A[i,j]}
}
for(i in ((N1+1):(Total-1)))
{for(j in ((i+1):Total))
{ A[i,j]<-rbinom(1,1,P2)
A[j,i]<-A[i,j]
}
}
for(i in (1:N1))
{for(j in (N1+1):Total)
{A[i,j]<-rbinom(1,1,P12)
A[j,i]<-A[i,j]
A
}
}
A
image(A)
set.seed(23)
Total<-20
N1<-Total/2
P1<-0.75
P2<-0.6
P12=0.04
Iteration<-2
CAP<-4
bb<-list()         ## edges to remove
bb[[1]]<-c(1,1)
bb[[2]]<-c(4,19)
bb[[3]]<-c(12,17)
bb[[4]]<-c(13,18)
bb[[5]]<-c(1,3)
bb[[6]]<-c(15,8)
bb[[7]]<-c(2,6)
A<-matrix(0,nrow=Total,ncol=Total)                       ######### define adjacent matrix
for(i in (1:(N1-1)))
{for(j in ((i+1):N1))
{A[i,j]<-rbinom(1,1,P1)
A[j,i]<-A[i,j]}
}
for(i in ((N1+1):(Total-1)))
{for(j in ((i+1):Total))
{ A[i,j]<-rbinom(1,1,P2)
A[j,i]<-A[i,j]
}
}
for(i in (1:N1))
{for(j in (N1+1):Total)
{A[i,j]<-rbinom(1,1,P12)
A[j,i]<-A[i,j]
}
}
listA = list()
for (i in 1:7){
tgtA = A
idm  = bb[[i]][1]
idn  = bb[[i]][2]
tgtA[idm,idn] = 0
tgtA[idn,idm] = 0
listA[[i]] = tgtA
}
testdec(listA)
library(NetworkDistance)
library(NetworkDistance)
nd.gdd(listA)$distmat
nd.gdd(listA)$D
B = listA[[1]]
B
eigen(A)
isSymmetric(B)
B
image(B)
image(listA[[2]])
image(B)
eigen(B)
eigen(B)$values
newvals = eigen(B)$values
newvals[(newvals<0)]=0
Bnew = eigen(B)$vectors%*%diag(newvals)%*%t(eigen(B)$vectors)
x11()
par(mfrow=c(1,2))
image(B); image(Bnew)
Bnew
BB = eigen(B)$vectors%*%diag(eigen(B)$values)%*%t(eigen(B)$vectors)
x11()
par(mfrow=c(1,3))
image(B); image(BB); image(Bnew)
image(B); image(BB); image(Bnew)
par(mfrow=c(1,3))
image(B); image(BB); image(Bnew)
B
image(B)
library(igraph)
BG = graph(B)
plot.igraph(B)
B
?graph
?graph.adjacency
Bgraph = graph_from_adjacency_matrix(B)
plot.igraph(Bgraph)
x11()
plot.igraph(Bgraph)
eigen(B)
library(NetworkDistance)
laplacian_normalized <- function(matA){
dd = colSums(matA)
Dinv2 = diag(1/sqrt(dd))
Dinv2[which(is.infinite(Dinv2))]=0
D     = diag(dd)
output = Dinv2%*%(D-matA)%*%Dinv2
return(output)
}
laplacian_unnormalized <- function(matA){
matD = diag(rowSums(matA))-matA
return(matD)
}
listA
normalized=FALSE
# parameters
N = length(listA)
p = nrow(listA[[1]])
# compute graph laplacians
Ls = list()
if (normalized==FALSE){
for (i in 1:N){
tgt = listA[[i]]
diag(tgt) = 0
Ls[[i]] = laplacian_unnormalized(tgt)
}
} else if (normalized==TRUE){
for (i in 1:N){
tgt = listA[[i]]
diag(tgt) = 0
Ls[[i]] = laplacian_normalized(tgt)
}
} else {
stop("")
}
# now do eigendecomposition for each
eigvals = array(0,c(p,N))   # stack as columns
eigvecs = array(0,c(p,p,N)) # stack as slices
for (i in 1:N){
tgteig = eigen(Ls[[i]])
eigvals[,i]  = as.vector(tgteig$values)
eigvecs[,,i] = as.matrix(tgteig$vectors)
}
eigvals
dim(eigvals)
dim(eigvecs)
t(eigvecs[,,1])%*%eigvecs[,,1]
library(NetworkDistance)
nd.gdd(listA)
CPPgdd = nd.gdd(listA, out.dist=FALSE)$D
library(NetworkDistance)
library(NetworkDistance)
Rgdd = nd.gdd(listA, out.dist=FALSE)$D
CPPgdd
Rgdd
library(NetworkDistance)
gddR = Rgdd
library(NetworkDistance)
gddCPP = nd.gdd(listA, out.dist=FALSE)$D
gddR
gddCPP
gddR^2
gddR^2-gddCPP
library(NetworkDistance)
gddCPP
nd.gdd(listA, out.dist=FALSE)$D
nd.gdd(listA, out.dist=FALSE)$maxt
nd.gdd(listA, out.dist=FALSE, vect=seq(from=0.01, to=10, length.out=100))$D
testdec(listA)
nd.gdd(listA, out.dist=FALSE, vect=seq(from=0, to=10, length.out=100))$D
nd.gdd(listA, out.dist=FALSE, vect=seq(from=0.01, to=10, length.out=100))$D
library(NetworkDistance)
nd.gdd(listA, out.dist=FALSE, vect=seq(from=0, to=10, length.out=100))$D
testdec(listA, vect=seq(from=0, to=10, length.out=100))
rm(list=ls())
library(NetworkDistance)
set.seed(23)
Total<-20
N1<-Total/2
P1<-0.75
P2<-0.6
P12=0.04
Iteration<-2
CAP<-4
bb<-list()         ## edges to remove
bb[[1]]<-c(1,1)
bb[[2]]<-c(4,19)
bb[[3]]<-c(12,17)
bb[[4]]<-c(13,18)
bb[[5]]<-c(1,3)
bb[[6]]<-c(15,8)
bb[[7]]<-c(2,6)
A<-matrix(0,nrow=Total,ncol=Total)                       ######### define adjacent matrix
for(i in (1:(N1-1)))
{for(j in ((i+1):N1))
{A[i,j]<-rbinom(1,1,P1)
A[j,i]<-A[i,j]}
}
for(i in ((N1+1):(Total-1)))
{for(j in ((i+1):Total))
{ A[i,j]<-rbinom(1,1,P2)
A[j,i]<-A[i,j]
}
}
for(i in (1:N1))
{for(j in (N1+1):Total)
{A[i,j]<-rbinom(1,1,P12)
A[j,i]<-A[i,j]
}
}
listA = list()
for (i in 1:7){
tgtA = A
idm  = bb[[i]][1]
idn  = bb[[i]][2]
tgtA[idm,idn] = 0
tgtA[idn,idm] = 0
listA[[i]] = tgtA
}
}
testdec(listA)
testdec(listA)
testdec(listA)
testdec(listA)
x11()
par(mfrow=c(1,7))
for (i in 1:7){
plot.igraph(graph_from_adjacency_matrix(listA[[i]]))
}
rm(list=ls())
library(NetworkDistance)
set.seed(23)
Total<-20
N1<-Total/2
P1<-0.75
P2<-0.6
P12=0.04
Iteration<-2
CAP<-4
bb<-list()         ## edges to remove
bb[[1]]<-c(1,1)
bb[[2]]<-c(4,19)
bb[[3]]<-c(12,17)
bb[[4]]<-c(13,18)
bb[[5]]<-c(1,3)
bb[[6]]<-c(15,8)
bb[[7]]<-c(2,6)
A<-matrix(0,nrow=Total,ncol=Total)                       ######### define adjacent matrix
for(i in (1:(N1-1)))
{for(j in ((i+1):N1))
{A[i,j]<-rbinom(1,1,P1)
A[j,i]<-A[i,j]}
}
for(i in ((N1+1):(Total-1)))
{for(j in ((i+1):Total))
{ A[i,j]<-rbinom(1,1,P2)
A[j,i]<-A[i,j]
}
}
for(i in (1:N1))
{for(j in (N1+1):Total)
{A[i,j]<-rbinom(1,1,P12)
A[j,i]<-A[i,j]
}
}
listA = list()
for (i in 1:7){
tgtA = A
idm  = bb[[i]][1]
idn  = bb[[i]][2]
tgtA[idm,idn] = 0
tgtA[idn,idm] = 0
listA[[i]] = tgtA
}
listA
testdec(listA)
nd.gdd(listA, out.dist=FALSE)$D
testdec(listA)
library(NetworkDistance)
#' tester
#'
#' @examples
#' \dontrun{
#' set.seed(23)
#' Total<-20
#' N1<-Total/2
#' P1<-0.75
#' P2<-0.6
#' P12=0.04
#' Iteration<-2
#' tester
#'
#' @examples
#' \dontrun{
#' set.seed(23)
#' Total<-20
#' N1<-Total/2
#' P1<-0.75
#' P2<-0.6
#' P12=0.04
#' Iteration<-2
library(NetworkDistance)
output = testdec(listA)
set.seed(23)
Total<-20
N1<-Total/2
P1<-0.75
P2<-0.6
P12=0.04
Iteration<-2
CAP<-4
bb<-list()         ## edges to remove
bb[[1]]<-c(1,1)
bb[[2]]<-c(4,19)
bb[[3]]<-c(12,17)
bb[[4]]<-c(13,18)
bb[[5]]<-c(1,3)
bb[[6]]<-c(15,8)
bb[[7]]<-c(2,6)
A<-matrix(0,nrow=Total,ncol=Total)                       ######### define adjacent matrix
for(i in (1:(N1-1)))
{for(j in ((i+1):N1))
{A[i,j]<-rbinom(1,1,P1)
A[j,i]<-A[i,j]}
}
for(i in ((N1+1):(Total-1)))
{for(j in ((i+1):Total))
{ A[i,j]<-rbinom(1,1,P2)
A[j,i]<-A[i,j]
}
}
for(i in (1:N1))
{for(j in (N1+1):Total)
{A[i,j]<-rbinom(1,1,P12)
A[j,i]<-A[i,j]
}
}
listA = list()
for (i in 1:7){
tgtA = A
idm  = bb[[i]][1]
idn  = bb[[i]][2]
tgtA[idm,idn] = 0
tgtA[idn,idm] = 0
listA[[i]] = tgtA
}
# compute the distance and visualize
output = testdec(listA)
image(as.matrix(output$D), main="two group case")
library(NetworkDistance)
library(NetworkDistance)
# compute two diffusion-based distances and visualize
out1 = nd.gdd(listA, out.dist=FALSE)$D
out2 = testdec(listA, out.dist=FALSE)$D
par(mfrow=c(1,2))
image(pracma::flipud(out1$D), main="Hammond")
image(pracma::flipud(out2$D), main="Dianbin")
library(NetworkDistance)
out1 = nd.gdd(listA, out.dist=FALSE)$D
# compute two diffusion-based distances and visualize
out1 = nd.gdd(listA, out.dist=FALSE)$D
out2 = testdec(listA, out.dist=FALSE)$D
par(mfrow=c(1,2))
image(pracma::flipud(out1$D), main="Hammond")
image(pracma::flipud(out2$D), main="Dianbin")
library(NetworkDistance)out1$D
out1$D
out1
par(mfrow=c(1,2))
image(pracma::flipud(out1), main="Hammond")
image(pracma::flipud(out2), main="Dianbin")
?image
par(mfrow=c(1,2))
image(pracma::flipud(out1),col  = gray((0:32)/32), main="Hammond")
image(pracma::flipud(out2),col  = gray((0:32)/32), main="Dianbin")
par(mfrow=c(1,2))
image(pracma::flipud(out1),col=gray((0:32)/32), main="Hammond",axes=FALSE)
image(pracma::flipud(out2),col=gray((0:32)/32), main="Dianbin",axes=FALSE)
par(mfrow=c(1,2))
image(pracma::flipud(out1),col=gray((0:32)/32), main="Hammond Pairwise Distance",axes=FALSE)
image(pracma::flipud(out2),col=gray((0:32)/32), main="Dianbin Pairwise Distance",axes=FALSE)
library(NetworkDistance)
library(NetworkDistance)
install.packages("igraph")
install.packages("network")
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
data(graph20)
lap20 = list()
for (i in 1:20){A = graph20[[i]]; D=diag(rowSums(A)); L=D-A;lap20[[i]]=L}
for (i in 1:20){print(min(eigen(lap20[[i]])$values))}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values),2)}
help(tail)
for (i in 1:20){print(tail(eigen(lap20[[i]])$values),n=2)}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values,n=2))}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values,n=3))}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values,n=2))}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values,n=3))}
for (i in 1:20){print(tail(eigen(lap20[[i]])$values,n=5))}
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
data(graph20)
## Compute Distance Matrix and Visualize
output = nd.csd(graph20, out.dist=FALSE, bandwidth=1.0)
image(output$D, main="two group case")
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
help(eigs)
A = matrix(rnorm(9),nrow=3)
A = t(A)%*%A
RSpectra::eigs_sym(A)
RSpectra::eigs_sym(A,1)
RSpectra::eigs_sym(A,1,which="SM")
A
A = matrix(rnorm(8),nrow=4)
A = A%*%t(A)
RSpectra::eigs_sym(A, 1, which="SM")
eigen(A)$values
RSpectra::eigs_sym(A, 1, which="SM")$values
sqrt(.Machine$double.eps)
library(NetworkDistance)
library(NetworkDistance)
install.packages(c("pracma","network","doParallel"))
library(NetworkDistance)
library(NetworkDistance)
library(NetworkDistance)
.rs.setClangDiagnostics(2)
usethis::edit_r_makevars()
